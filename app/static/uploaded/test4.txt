.data

.address
5000   # starting address of instructions

.text
# Non-leaf-program example
# The program is used to calculate the factorial of integer
# x0 = 24 (result = 4! = 24)
# Used instructions: jal, jalr, addi, beq, addi, lw, sw, slti, beq, mul, ecall
# Also, it uses the stack pointer 

addi a0,zero,4
jal ra,fact
beq x0,x0,exit
fact:
addi sp, sp, -8 # adjust stack for 2 items
sw ra, 4(sp) # save return address
sw a0, 0(sp) # save argument
slti t0, a0, 1 # test for n < 1
beq t0, zero, L1
addi a0, zero, 1 # if so, result is 1
addi sp, sp, 8 # pop 2 items from stack
jalr zero, 0(ra) # and return
L1: addi a0, a0, -1 # else decrement n
jal ra, fact # recursive call
addi t0, a0, 0 # move result of fact(n-1)
lw a0, 0(sp) # restore original n
lw ra, 4(sp) # and return address
addi sp, sp, 8 # pop 2 items from stack
mul a0, a0, t0 # multiply to get result
jalr zero, 0(ra) # and return
exit:
ecall